generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  passwordHash  String
  profileImage  String?
  bio           String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  progress      UserProgress[]
  answers       UserAnswer[]
  simulations   Simulation[]
}

model StudyBlock {
  id          String         @id @default(cuid())
  title       String
  description String?
  order       Int            @unique
  questions   Question[]
  progress    UserProgress[]
}

model Question {
  id          String       @id @default(cuid())
  blockId     String
  block       StudyBlock   @relation(fields: [blockId], references: [id], onDelete: Cascade)
  statement   String       @db.Text
  type        QuestionType
  difficulty  Difficulty
  options     Json?
  isCorrect   Boolean?
  explanation String       @db.Text
  answers     UserAnswer[]
}

model UserProgress {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  blockId   String
  block     StudyBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)
  correct   Int        @default(0)
  wrong     Int        @default(0)
  unlocked  Boolean    @default(false)
  completed Boolean    @default(false)

  @@unique([userId, blockId])
}

model UserAnswer {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isCorrect  Boolean
  answeredAt DateTime @default(now())

  @@unique([userId, questionId])
}

model Simulation {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  score       Float
  startedAt   DateTime     @default(now())
  finishedAt  DateTime?
  passed      Boolean
  certificate Certificate?
}

model Certificate {
  id           String     @id @default(cuid())
  simulationId String     @unique
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  url          String
  issuedAt     DateTime   @default(now())
}

enum QuestionType {
  CERTO_ERRADO
  MULTIPLA_ESCOLHA
}

enum Difficulty {
  FACIL
  MEDIO
  DIFICIL
}